What happens when you initialize a repository? Why do you need to do it?

	A ".git" folder is created giving you the ability to start adding files you want to track.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
	
	Staging area is different from the working directory because the files are already marked
	to be tracked and to be sent on the next commit, but they aren't committed yet and they 
	aren't stored in the repository yet.

	It's valuable because it allows you to put together all the files you are going to send
	on the next commit, organizing them logically.

How can you use the staging area to make sure you have one commit per logical
change?

	By adding to the staginig area just the files that are pertinent to a logical change
	and then committing those files. Prior to committing, you can always check using 
	'git diff' if you added all the files to the staging area and with 'git diff --staged'
	you can confirm that the staged files are exactly the ones you need to send on the 
	next commit.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	When people are working on different projects for the same app.
	When working with projects on different timelines.
	When testing a new framework or functionality on your app.
	To implement concepts you are not sure yet you want on your app.

How do the diagrams help you visualize the branch structure?

	Helped me to see how branches are carried around with the last commit (tip of the branch),
	how a commit can be unreachable and how to preserve it or save it from being lost by 
	creating a new branch using 'git checkout -b <new branch name>'

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
